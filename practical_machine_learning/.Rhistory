str(train_data$classe)
install.packages("RWeka")
model <- train(classe ~ . ,data = train_data, method = "lssvmPoly")
library(caret, quietly = T, warn.conflicts = F)
library(e1071, quietly = T, warn.conflicts = F)
if(!require(RANN)) {
install.packages("RANN")
require(RANN)
}
if(!require(doParallel)) {
install.packages("doParallel")
require(doParallel)
}
if(!require(klaR)) {
require(klaR)
install.packages("klaR")
}
if(!require(MASS)) {
install.packages("MASS")
require(MASS)
}
library(dplyr)
model <- train(classe ~ . ,data = train_data, method = "lssvmPoly")
warning()
warnings()
library(kernlab)
lm <- ksvm(classe ~ ., data = train_data)
lm <- ksvm(classe ~ ., data = train_data, kernel = "vanilladot")
lm <- ksvm(classe ~ ., data = train_data, kernel = "vanilladot",scale=FALSE)
?svm
lm <- svm(classe ~ ., data = train_data)
lm <- svm(classe ~ ., data = train_data, scale = F)
lm
tt1 <- predict(lm, train_data)
model <- train(classe ~ . ,data = train_data, method = "bayesglm")
lm <- naiveBayes(classe ~ ., data = train_data)
tt1 <- predict(lm, train_data)
select(train_data, -classe)
tt1 <- predict(lm, select(train_data, -classe))
tt1
table(tt1, train_data$classe)
select(pmlTrain_pp_test, -classe)
tt1 <- predict(lm, pmlTrain_pp_test)
table(tt1, train_data$classe)
table(tt1, classe_test)
lm <- randomForest(classe ~ ., data = train_data)
model <- train.default(x=pmlTrain_pp_train, y = classe_train, method = "nb", importance=T)
warnings()
model <- train(classe ~ . ,data = train_data, method = "bayesglm")
model <- train.default(x=pmlTrain_pp_train, y = classe_train, method = "nb")
source('C:/Users/rkmalaiya/OneDrive/Documents/coursera/DataMiningSpecialization/practical_machine_learning/restarting_again_coursera_project_human_activity_recognition_afterreadingbook.R')
dim(pmlTrain)
names(pmlTrain)
summary(pmlTrain)
pmlTrain <- pmlTrain[,c(1:7)]
pmlTrain <- tbl_df(pmlTrain)
head(pmlTrain, n = 50)
head(pmlTrain, n = 50)
pmlTrain <- read.csv("pml-training.csv")
pmlTest <- read.csv("pml-testing.csv")
pmlTrain <- tbl_df(pmlTrain)
dim(pmlTrain)
names(pmlTrain)
pmlTrain_yes <- filter(pmlTrain, new_window = 'yes')
?filter
pmlTrain_yes <- filter(pmlTrain, new_window == 'yes')
pmlTrain_no <- filter(pmlTrain, new_window == 'no')
pmlTrain_yes <- filter(pmlTrain, new_window == 'yes', num_window == 1)
pmlTrain_no <- filter(pmlTrain, new_window == 'no', num_window == 1)
pmlTrain_yes <- filter(pmlTrain, new_window == 'yes')
View(pmlTrain_yes)
View(pmlTrain)
pmlTrain <- read.csv("pml-training.csv")
library(caret, quietly = T, warn.conflicts = F)
library(e1071, quietly = T, warn.conflicts = F)
if(!require(RANN)) {
install.packages("RANN")
require(RANN)
}
if(!require(doParallel)) {
install.packages("doParallel")
require(doParallel)
}
if(!require(klaR)) {
install.packages("klaR")
require(klaR)
}
if(!require(MASS)) {
install.packages("MASS")
require(MASS)
}
library(dplyr)
pmlTrain <- read.csv("pml-training.csv")
pmlTrain <- fread("pml-training.csv")
library(data.table)
pmlTrain <- fread("pml-training.csv")
View(pmlTrain)
summary(pmlTrain)
str(pmlTrain)
pmlTest <- read.csv("pml-testing.csv")
str(pmlTest)
pmlTrain <- fread("pml-training.csv")
pmlTest <- fread("pml-testing.csv")
pmlTrain <- tbl_dt(pmlTrain)
dim(pmlTrain)
names(pmlTrain)
str(pmlTest)
summary(pmlTest)
summary.bagEarth(pmlTest)
summary.lm(pmlTest)
summary(pmlTest)
pmlTrain_yes <- filter(pmlTrain, new_window == 'yes', num_window == 2)
pmlTrain_no <- filter(pmlTrain, new_window == 'no', num_window == 2)
View(pmlTrain_yes)
View(pmlTrain_no)
head(pmlTrain_yes)
head(pmlTrain_no, n= 20)
head(pmlTrain_no)
head(pmlTrain_yes, n= 1)
head(pmlTrain_no, n = 2)
source('C:/Users/rkmalaiya/OneDrive/Documents/coursera/DataMiningSpecialization/practical_machine_learning/restarting_again_coursera_project_human_activity_recognition_afterreadingbook.R')
View(pmlTrain_no)
pmlTrain_sel <- select(pmlTrain, -contains("kurtosis_"))
pmlTrain_sel <- ddplyr::select(pmlTrain, -contains("kurtosis_"))
library(caret, quietly = T, warn.conflicts = F)
library(e1071, quietly = T, warn.conflicts = F)
if(!require(RANN)) {
install.packages("RANN")
require(RANN)
}
if(!require(doParallel)) {
install.packages("doParallel")
require(doParallel)
}
if(!require(klaR)) {
install.packages("klaR")
require(klaR)
}
if(!require(MASS)) {
install.packages("MASS")
require(MASS)
}
library(dplyr)
library(data.table)
pmlTrain_sel <- dplyr::select(pmlTrain, -contains("kurtosis_"))
pmlTrain_sel <- dplyr::select(pmlTrain, contains("kurtosis_"))
pmlTrain_sel <- dplyr::select(pmlTrain, contains("max_"))
pmlTrain <- fread("pml-training.csv")
pmlTest <- fread("pml-testing.csv")
pmlTrain <- tbl_dt(pmlTrain)
pmlTrain_yes <- filter(pmlTrain, new_window == 'yes', num_window == 2)
pmlTrain_no <- filter(pmlTrain, new_window == 'no', num_window == 2)
pmlTrain_sel <- dplyr::select(pmlTrain, contains("max_"))
pmlTrain_sel <- dplyr::select(pmlTrain, -contains("max_"))
pmlTrain_sel <- pmlTrain[,c(1:7)]
pmlTrain_sel <- pmlTrain[,c(1:7)]
pmlTrain_sel <- dplyr::select(pmlTrain_sel, -contains("kurtosis_"), -contains("skewness_"), -contains("max_"), -contains("min_"),
-contains("amplitude_"), -contains("var_total"), -contains("avg_"), -contains("stddev_"), -contains("var_") )
pmlTrain_sel <- pmlTrain[,c(1:7)]
pmlTrain_sel <- pmlTrain[ ,-c(1:7)]
pmlTrain_sel <- pmlTrain[ ,-(1:7)]
pmlTrain_sel <- pmlTrain[ ,-(1:7), with = F]
pmlTrain_sel <- pmlTrain[ ,(1:7), with = F]
pmlTrain_sel <- pmlTrain[ ,-(1:7), with = F]
pmlTrain_sel <- dplyr::select(pmlTrain_sel, -contains("kurtosis_"), -contains("skewness_"), -contains("max_"), -contains("min_"),
-contains("amplitude_"), -contains("var_total"), -contains("avg_"), -contains("stddev_"), -contains("var_") )
pmlTrain_yes <- tbl_df(filter(pmlTrain, new_window == 'yes', num_window == 2))
pmlTrain_no <-tbl_df (filter(pmlTrain, new_window == 'no', num_window == 2))
head(pmlTrain_yes, n= 1)
head(pmlTrain_no, n = 2)
registerDoParallel(cores=4)
control <- trainControl(method="repeatedcv", number=2, repeats=2)
model <- train(classe~., data=pmlTrain_sel, method="nb", trControl=control)
class(pmlTrain$classe)
pmlTrain_sel <- data.frame(sapply(select(pmlTrain_sel, -classe), as.numeric))
pmlTrain_sel <- pmlTrain[ ,-(1:7), with = F]
pmlTrain_sel <- dplyr::select(pmlTrain_sel, -contains("kurtosis_"), -contains("skewness_"), -contains("max_"), -contains("min_"),
-contains("amplitude_"), -contains("var_total_"), -contains("avg_"), -contains("stddev_"), -contains("var_") )
classe <- as.factor(pmlTrain_sel$classe)
pmlTrain_sel <- data.frame(sapply(select(pmlTrain_sel, -classe), as.numeric))
pmlTrain_sel$classe <- classe
model <- train(classe~., data=pmlTrain_sel, method="nb", trControl=control)
plot(model)
pmlTrain_pred <- predict(model)
confusionMatrix(pmlTrain_pred, pmlTrain_sel$classe)
prop.table(confusionMatrix(pmlTrain_pred, pmlTrain_sel$classe, pmlTrain))
prop.table(confusionMatrix(pmlTrain_pred, pmlTrain_sel$classe, pmlTrain)$table)
confusionMatrix(pmlTrain_pred, pmlTrain_sel$classe, pmlTrain)
confusionMatrix(pmlTrain_pred, pmlTrain_sel$classe)
prop.table(confusionMatrix(pmlTrain_pred, pmlTrain_sel$classe)$table)
prop.table(confusionMatrix(pmlTrain_sel$classe, pmlTrain_pred)$table)
confusionMatrix(pmlTrain_pred, pmlTrain_sel$classe)
model <- train(classe~., data=pmlTrain_sel, method="brnn", trControl=control)
model <- train(classe~., data=pmlTrain_sel, method="elm", trControl=control)
model <- train(classe~., data=pmlTrain_sel, method="elm", trControl=control)
plot(model)
pmlTrain_pred <- predict(model)
confusionMatrix(pmlTrain_pred, pmlTrain_sel$classe)
prop.table(confusionMatrix(pmlTrain_pred, pmlTrain_sel$classe)$table)
registerDoParallel(cores=4)
control <- trainControl(method="repeatedcv", number=2, repeats=2)
pmlTest_sel <- pmlTest[, names(pmlTrain_sel)]
pmlTest_sel <- pmlTest[, names(pmlTrain_sel), with = F]
classe <- as.factor(pmlTest_sel$classe)
pmlTest_sel <- data.frame(sapply(select(pmlTest_sel, -classe), as.numeric))
pmlTest_sel$classe <- classe
classe
pmlTest_sel <- select(pmlTest, names(pmlTrain_sel))
pmlTest_sel <- pmlTest[, names(pmlTrain_sel)]
pmlTest <- as.data.frame(pmlTest)
pmlTest_sel <- pmlTest[, names(pmlTrain_sel)]
classe <- as.factor(pmlTest_sel$classe)
classe
pmlTest_sel$classe
pmlTest <- fread("pml-testing.csv")
pmlTest_sel <- pmlTest[, names(pmlTrain_sel)]
pmlTest_sel <- pmlTest[, names(pmlTrain_sel), with=F]
pmlTest_sel <- data.frame(sapply(select(pmlTest_sel, -classe), as.numeric))
model <- train(classe~., data=pmlTrain_sel, method="nb", trControl=control)
plot(model)
pmlTrain_pred <- predict(model)
warnings()
sum(is.na(pmlTrain_sel))
pmlTrain_pred <- predict(model)
boxplot(pmlTrain_sel)
preObj <- preProcess(pmlTrain_sel, method = c("center", "scale"))
classe <- as.factor(pmlTrain_sel$classe)
pmlTrain_sel <- data.frame(sapply(select(pmlTrain_sel, -classe), as.numeric))
pmlTest_sel <- data.frame(sapply(select(pmlTest_sel, -classe), as.numeric))
boxplot(pmlTrain_sel)
cor(pmlTrain_sel, use = "p")
cor <- cor(pmlTrain_sel, use = "p")
hist(cor)
boxplot(pmlTrain_sel)
preObj <- preProcess(pmlTrain_sel, method = c("center", "scale"))
pmlTrain_prep <- predict(preObj, pmlTrain_sel)
pmlTest_prep <- predict(preObj, pmlTest_sel)
boxplot(pmlTrain_prep)
registerDoParallel(cores=4)
control <- trainControl(method="repeatedcv", number=2, repeats=2)
pmlTrain_prep$classe <- classe
model <- train(classe~., data=pmlTrain_prep, method="nb", trControl=control)
plot(model)
pmlTrain_pred <- predict(model)
warnings()
cor <- cor(pmlTrain_prep, use = "p")
cor <- cor(select(pmlTrain_prep, -classe), use = "p")
hist(cor)
pmlTrain_prep <- select(pmlTrain_prep, -classe)
highlyCor <- findCorrelation(pmlTrain_prep, exact = F)
pmlTrain_nonCor <- pmlTrain_prep[ , - highlyCor[complete.cases(highlyCor)]]
model <- train(classe~., data=pmlTrain_nonCor, method="nb", trControl=control)
plot(model)
pmlTrain_pred <- predict(model)
warnings()
confusionMatrix(classe, pmlTrain_pred)
model <- train(classe~., data=pmlTrain_nonCor, method="avNNet", trControl=control)
plot(model)
pmlTrain_pred <- predict(model)
confusionMatrix(classe, pmlTrain_pred)
library(cluster)
h <- hclust(pmlTrain_nonCor)
classDist(pmlTrain_prep)
?classDist
classDist(pmlTrain_prep, classe)
distances <- predict(centroids)
centroids <- classDist(pmlTrain_prep, classe)
distances <- predict(centroids)
distances <- as.data.frame(distances)
distances <- predict(centroids, newdata = pmlTrain_prep)
distances <- as.data.frame(distances)
head(distances)
xyplot(dist.Active ~ dist.Inactive,
data = distances,
groups = testMDRR,
auto.key = list(columns = 2))
xyplot(dist.Active ~ dist.Inactive,
data = distances,
groups = classe,
auto.key = list(columns = 2))
distances <- as.data.frame(distances)
head(distances)
distances <- predict(centroids, newdata = pmlTest_prep)
distances <- as.data.frame(distances)
head(distances)
warnings()
pmlTrain_nonCor[2185,]
boxplot(pmlTrain_nonCor[2000:2185,])
qqnorm(pmlTrain_nonCor[2000:2185,])
qqnorm(pmlTrain_nonCor[,])
preObj <- preProcess(pmlTrain_sel, method = c("YeoJohnson"))
preObj <- preProcess(pmlTrain_sel, method = c("BoxCox"))
pmlTrain_prep <- predict(preObj, pmlTrain_sel)
pmlTest_prep <- predict(preObj, pmlTest_sel)
boxplot(select(pmlTrain_prep, -classe))
boxplot(pmlTrain_prep)
boxplot(pmlTrain_sel)
cor <- cor(select(pmlTrain_sel, -classe), use = "p")
cor <- cor(pmlTrain_sel, use = "p")
hist(cor)
preObj <- preProcess(pmlTrain_sel)
pmlTrain_prep <- predict(preObj, pmlTrain_sel)
pmlTest_prep <- predict(preObj, pmlTest_sel)
boxplot(pmlTrain_sel)
cor <- cor(pmlTrain_sel, use = "p")
hist(cor)
registerDoParallel(cores=4)
control <- trainControl(method="repeatedcv", number=2, repeats=2)
model <- train(classe~., data=pmlTrain_prep, method="nb", trControl=control)
plot(model)
registerDoParallel(cores=4)
model <- train(classe~., data=pmlTrain_prep, method="avNNet", trControl=control)
plot(model)
pmlTrain_pred <- predict(model)
confusionMatrix(classe, pmlTrain_pred)
pmlTest_pred <- predict(model, newdata = pmlTest_sel)
confusionMatrix(pmlTest_pred, pmlTest_sel$classe)
confusionMatrix(classe, pmlTest_pred)
pmlTest_pred
registerDoParallel(cores=4)
model <- train(classe~., data=pmlTrain_prep, method=c("nb","avNNet"), trControl=control)
model <- train(classe~., data=pmlTrain_prep, method="avNNet", metric = "ROC" ,trControl=control)
registerDoParallel(cores=4)
control <- trainControl(method="repeatedcv", number=2, repeats=2, classProbs = TRUE)
model <- train(classe~., data=pmlTrain_prep, method="avNNet", metric = "ROC" ,trControl=control)
plot(model)
pmlTrain_pred <- predict(model)
confusionMatrix(classe, pmlTrain_pred)
modelNB <- train(classe~., data=pmlTrain_prep, method="nb", metric = "ROC", trControl=control)
save(modelNB, file = "modelNB.rda")
plot(modelNB)
pmlTrain_pred <- predict(modelNB)
modelNB
pmlTrain_pred
dim(pmlTrain_pred)
length(pmlTrain_pred)
unique(pmlTrain_pred)
warnings()
pmlTrain_pred[196]
pmlTrain_pred[196:203]
pmlTrain_pred <- predict(modelNB, type = c("probs"))
pmlTrain_pred <- predict(modelNB, type = c("prob"))
warnings()
pmlTrain_pred[196:203]
pmlTrain_pred[196:203,]
pmlTrain_pred[121:148,]
pmlTrain_pred[44:50,]
pmlTrain_prep[44:50,]
classe[44:50]
modelSVM <- train(classe~., data=pmlTrain_prep, method="svmRadial", metric = "ROC" ,trControl=control)
save(modelSVM, file = "modelSVM.rda")
plot(modelSVM)
registerDoParallel(cores=2)
control <- trainControl(method="repeatedcv", number=2, repeats=2)
modelavNNET <- train(classe~., data=pmlTrain_prep, method="brnn", trControl=control)
plot(modelSVM)
pmlTrain_pred <- predict(modelSVM)
confusionMatrix(classe, pmlTrain_pred)
modelavNNET <- train(classe~., data=pmlTrain_prep, method="avNNET", trControl=control)
modelavNNET <- train(classe~., data=pmlTrain_prep, method="avNNet", trControl=control)
modelgamboost <- train(classe~., data=pmlTrain_prep, method="gamboost", trControl=control)
plot(modelgamboost)
results <- resamples(list(nb=modelNB, avNNet=modelavNNET, SVM=modelSVM))
summary(results)
bwplot(results)
dotplot(results)
pmlTest_pred_nb <- predict(modelNB, newdata = pmlTest_sel)
pmlTest_pred_nnet <- predict(modelavNNET, newdata = pmlTest_sel)
pmlTest_pred_svm <- predict(modelSVM, newdata = pmlTest_sel)
warnings()
pmlTest_pred_nb
pmlTest_pred_nnet
pmlTest_pred_svm
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
dt <- data.table(read.csv(f))
agricultureLogical <- dt$ACR == 3 & dt$AGS == 6
which(agricultureLogical)[1:3]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
f <- file.path(getwd(), "jeff.jpg")
download.file(url, f, mode="wb")
img <- readJPEG(f, native=TRUE)
packages <- c("data.table", "jpeg")
sapply(packages, require, character.only=TRUE, quietly=TRUE)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
f <- file.path(getwd(), "jeff.jpg")
download.file(url, f, mode="wb")
img <- readJPEG(f, native=TRUE)
quantile(img, probs=c(0.3, 0.8))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
dtGDP <- data.table(read.csv(f, skip=4, nrows=215))
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
dt <- merge(dtGDP, dtEd, all=TRUE, by=c("CountryCode"))
sum(!is.na(unique(dt$rankingGDP)))
dt[order(rankingGDP, decreasing=TRUE), list(CountryCode, Long.Name.x, Long.Name.y, rankingGDP, gdp)][13]
dt[, mean(rankingGDP, na.rm=TRUE), by=Income.Group]
breaks <- quantile(dt$rankingGDP, probs=seq(0, 1, 0.2), na.rm=TRUE)
dt$quantileGDP <- cut(dt$rankingGDP, breaks=breaks)
dt[Income.Group == "Lower middle income", .N, by=c("Income.Group", "quantileGDP")]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
dt <- data.table(read.csv(f))
varNames <- names(dt)
varNamesSplit <- strsplit(varNames, "wgtp")
varNamesSplit[[123]]
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
f <- file.path(getwd(), "GDP.csv")
download.file(url, f)
dtGDP <- data.table(read.csv(f, skip=4, nrows=215, stringsAsFactors=FALSE))
dtGDP <- dtGDP[X != ""]
dtGDP <- dtGDP[, list(X, X.1, X.3, X.4)]
setnames(dtGDP, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
gdp <- as.numeric(gsub(",", "", dtGDP$gdp))
mean(gdp, na.rm=TRUE)
isUnited <- grepl("^United", dtGDP$Long.Name)
summary(isUnited)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
f <- file.path(getwd(), "EDSTATS_Country.csv")
download.file(url, f)
dtEd <- data.table(read.csv(f))
dt <- merge(dtGDP, dtEd, all=TRUE, by=c("CountryCode"))
isFiscalYearEnd <- grepl("fiscal year end", tolower(dt$Special.Notes))
isJune <- grepl("june", tolower(dt$Special.Notes))
table(isFiscalYearEnd, isJune)
dt[isFiscalYearEnd & isJune, Special.Notes]
amzn <- getSymbols("AMZN",auto.assign=FALSE)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn <- getSymbols("AMZN",auto.assign=FALSE)
sampleTimes <- index(amzn)
addmargins(table(year(sampleTimes), weekdays(sampleTimes)))
registerDoParallel(cores=2)
control <- trainControl(method="repeatedcv", number=2, repeats=2)
modelrf <- train(classe~., data=pmlTrain_prep, method="rf", trControl=control)
plot(modelrf)
pmlTrain_pred <- predict(modelrf)
confusionMatrix(classe, pmlTrain_pred)
results <- resamples(list(nb=modelNB, avNNet=modelavNNET, SVM=modelSVM, rf=modelrf))
summary(results)
bwplot(results)
dotplot(results)
pmlTest_pred_rf <- predict(modelrf, newdata = pmlTest_sel)
pmlTest_pred_rf
save(modelrf, file = "modelRF.rda")
source('C:/Users/rkmalaiya/OneDrive/Documents/coursera/DataMiningSpecialization/practical_machine_learning/restarting_again_coursera_project_human_activity_recognition_afterreadingbook.R')
source('C:/Users/rkmalaiya/OneDrive/Documents/coursera/DataMiningSpecialization/practical_machine_learning/restarting_again_coursera_project_human_activity_recognition_afterreadingbook.R')
warnings()
warnings(n=5)
source('C:/Users/rkmalaiya/OneDrive/Documents/coursera/DataMiningSpecialization/practical_machine_learning/restarting_again_coursera_project_human_activity_recognition_afterreadingbook.R')
pmlTest_pred_nb
pmlTest_pred_nnet
pmlTest_pred_svm
pmlTest_pred_rf
head(pmlTrain[, (1:10)], n = 20)
head(pmlTrain[, c(1:10)], n = 20)
head(pmlTrain)
pmlTrain <- tbl_dt(pmlTrain)
summary(pmlTrain)
head(pmlTrain)
str(pmlTrain)
pmlTrain[1,1:10]
pmlTrain[2,1:10]
pmlTrain[2,1:10, with = F]
pmlTrain[20,1:10, with = F]
pmlTrain[1:20,1:10, with = F]
pmlTrain[1:30,1:10, with = F]
pmlTrain[1:10,1:30, with = F]
pmlTrain[1:30,1:10, with = F]
pmlTrain[1:30,1:10, with = F]
pmlTrain_yes <- filter(pmlTrain, new_window == 'yes', num_window == 2)
pmlTrain_no <- filter(pmlTrain, new_window == 'no', num_window == 2)
head(pmlTrain_yes, n= 1)
head(pmlTrain_no, n = 2)
head(pmlTrain_yes[,7:20], n= 1)
head(pmlTrain_yes[,7:20, with=F], n= 1)
head(pmlTrain_no[,7:20, with=F], n = 2)
boxplot(pmlTrain_sel)
boxplot(pmlTrain_prep)
install.packages("outlier")
install.packages("outliers")
require(outliers)
rm.outlier(pmlTrain_sel, fill = T)
pmlTrain_sel <- rm.outlier(pmlTrain_sel, fill = T)
boxplot(pmlTrain_sel)
cor <- cor(pmlTrain_sel, use = "p")
hist(cor)
pmlTrain_sel_temp <- pmlTrain_sel
pmlTrain_sel_temp$classe <- classe
ddply(pmlTrain_sel_temp, ~classe, summarise, nrow)
ddply(pmlTrain_sel_temp, ~classe, summarise, nrow)
plyr::ddply(pmlTrain_sel_temp, ~classe, summarise, nrow)
plyr::ddply(pmlTrain_sel_temp, ~classe, summarise)
plyr::ddply(pmlTrain_sel_temp, ~classe, summarise, dim)
table(pmlTrain_sel_temp$classe)
table(pmlTrain_sel_temp, classe)
table(pmlTrain_sel_temp$classe)
table(cbind(pmlTrain_sel,classe))
table(c(pmlTrain_sel,classe))
table(pmlTrain_sel_temp$classe)
read.delim("pml-training.csv", sep="\n", nrows = 20)
read.delim("pml-training.csv", sep="\n", nrows = 10)
